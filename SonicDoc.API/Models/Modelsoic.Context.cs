//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SonicDoc.API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SonicdocEntities : DbContext
    {
        public SonicdocEntities()
            : base("name=SonicdocEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Doctor> Doctor { get; set; }
        public virtual DbSet<Especialidad> Especialidad { get; set; }
        public virtual DbSet<Reserva> Reserva { get; set; }
        public virtual DbSet<Reserva_Estado> Reserva_Estado { get; set; }
        public virtual DbSet<Turno> Turno { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Usuario_Estado> Usuario_Estado { get; set; }
    
        public virtual int sp_Insert_Doctor(Nullable<int> idesp, string dni, string clave, string nombres, string apellidos, Nullable<int> sexo, ObjectParameter iD)
        {
            var idespParameter = idesp.HasValue ?
                new ObjectParameter("idesp", idesp) :
                new ObjectParameter("idesp", typeof(int));
    
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Doctor", idespParameter, dniParameter, claveParameter, nombresParameter, apellidosParameter, sexoParameter, iD);
        }
    
        public virtual int sp_Insert_Reserva(Nullable<int> iduser, Nullable<int> iddoc, Nullable<System.DateTime> fecha, Nullable<int> idturno, Nullable<int> idestado, ObjectParameter iD)
        {
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(int));
    
            var iddocParameter = iddoc.HasValue ?
                new ObjectParameter("iddoc", iddoc) :
                new ObjectParameter("iddoc", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var idturnoParameter = idturno.HasValue ?
                new ObjectParameter("idturno", idturno) :
                new ObjectParameter("idturno", typeof(int));
    
            var idestadoParameter = idestado.HasValue ?
                new ObjectParameter("idestado", idestado) :
                new ObjectParameter("idestado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Reserva", iduserParameter, iddocParameter, fechaParameter, idturnoParameter, idestadoParameter, iD);
        }
    
        public virtual int sp_Insert_Usuario(string dni, string clave, string nombres, string apellidos, Nullable<int> sexo, ObjectParameter iD)
        {
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Usuario", dniParameter, claveParameter, nombresParameter, apellidosParameter, sexoParameter, iD);
        }
    
        public virtual int sp_Insert_Especialidad(Nullable<int> iduser, Nullable<int> idesp, ObjectParameter iD)
        {
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(int));
    
            var idespParameter = idesp.HasValue ?
                new ObjectParameter("idesp", idesp) :
                new ObjectParameter("idesp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Especialidad", iduserParameter, idespParameter, iD);
        }
    }
}
